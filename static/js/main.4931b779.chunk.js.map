{"version":3,"sources":["features/workspace/Workspace.module.css","features/grid/Grid.module.css","features/grid/gridSlice.js","features/workspace/Workspace.jsx","features/workspace/default_workspace.js","assets/units/worker.png","features/grid/Grid.jsx","App.jsx","app/store.js","serviceWorker.js","index.jsx"],"names":["module","exports","initialState","code","grid_size","x","y","position","blocks","sanityCheck","state","some","e","_","isEqual","gridSlice","createSlice","name","reducers","moveUp","moveDown","moveLeft","moveRight","move","action","changeSize","setCode","payload","actions","selectCode","grid","selectPosition","selectGridSize","selectBlocks","Blockly","Blocks","init","this","jsonInit","message0","args0","type","output","colour","tooltip","BlocklyJS","block","message","getFieldValue","ORDER_MEMBER","addReservedWords","Workspace","props","dispatch","useDispatch","useState","xml","setXml","className","styles","column","workspaceConfiguration","css","scrollbars","spacing","length","snap","onInject","workspace","category","getToolbox","getToolboxItems","dom_default","Xml","textToDom","updateFlyoutContents","toolboxConfiguration","custom_toolbox","onWorkspaceChange","workspaceToCode","xmlParsed","workspaceToDom","xmlText","domToText","console","log","initialXml","onXmlChange","Grid","useSelector","dot","obj","key","String","workerUnit","src","worker","alt","space","row","push","renderRows","button","onClick","App","store","configureStore","reducer","gridReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,IAAM,uBAAuB,WAAW,4BAA4B,iBAAiB,kCAAkC,aAAa,8BAA8B,WAAW,4BAA4B,OAAS,0BAA0B,IAAM,yB,mPCApQD,EAAOC,QAAU,CAAC,IAAM,kBAAkB,MAAQ,oBAAoB,OAAS,qBAAqB,QAAU,sBAAsB,YAAc,6CAA6C,WAAa,yBAAyB,MAAQ,sB,kOCEvOC,EAAe,CACnBC,KAAM,GACNC,UAAW,CAAEC,EAAG,EAAGC,EAAG,GACtBC,SAAU,CAAEF,EAAG,EAAGC,EAAG,GACrBE,OAAQ,CACN,CAAEH,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,KAIf,SAASG,EAAYC,GACfA,EAAMH,SAASD,EAAI,IACrBI,EAAMH,SAASD,EAAII,EAAMN,UAAUE,EAAI,GAErCI,EAAMH,SAASD,GAAKI,EAAMN,UAAUE,IACtCI,EAAMH,SAASD,EAAI,GAEjBI,EAAMH,SAASF,EAAI,IACrBK,EAAMH,SAASF,EAAIK,EAAMN,UAAUC,EAAI,GAErCK,EAAMH,SAASF,GAAKK,EAAMN,UAAUC,IACtCK,EAAMH,SAASF,EAAI,GAEjBK,EAAMF,OAAOG,MAAK,SAACC,GAAD,OAAOC,IAAEC,QAAQF,EAAGF,EAAMH,eAC9CG,EAAMH,SAAWL,EAAaK,UAI3B,IAAMQ,EAAYC,YAAY,CACnCC,KAAM,OACNf,eACAgB,SAAU,CACRC,OAAQ,SAACT,GAKPA,EAAMH,SAASD,GAAK,EACpBG,EAAYC,IAEdU,SAAU,SAACV,GACTA,EAAMH,SAASD,GAAK,EACpBG,EAAYC,IAEdW,SAAU,SAACX,GACTA,EAAMH,SAASF,GAAK,EACpBI,EAAYC,IAEdY,UAAW,SAACZ,GACVA,EAAMH,SAASF,GAAK,EACpBI,EAAYC,IAGda,KAAM,SAACb,EAAOc,GACZd,EAAMH,SAAWiB,EACjBf,EAAYC,IAEde,WAAY,SAACf,EAAOc,GAClBd,EAAMN,UAAYoB,EAClBf,EAAYC,IAEdgB,QAAS,SAAChB,EAAOc,GACfd,EAAMP,KAAOqB,EAAOG,YAKnB,EAQHZ,EAAUa,QAPZT,EADK,EACLA,OACAC,EAFK,EAELA,SACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,UAGAI,GAPK,EAKLH,KALK,EAMLE,WANK,EAOLC,SAgBWG,EAAa,SAACnB,GAAD,OAAWA,EAAMoB,KAAK3B,MACnC4B,EAAiB,SAACrB,GAAD,OAAWA,EAAMoB,KAAKvB,UACvCyB,EAAiB,SAACtB,GAAD,OAAWA,EAAMoB,KAAK1B,WACvC6B,EAAe,SAACvB,GAAD,OAAWA,EAAMoB,KAAKtB,QAEnCO,IAAf,Q,eCrFAmB,IAAQC,OAAR,YAAgC,CAC9BC,KAAM,WACJC,KAAKC,SAAS,CACZC,SAAU,WACVC,MAAO,CACL,CACEC,KAAM,cACNxB,KAAM,SAGVyB,OAAQ,SACRC,OAAQ,IACRC,QAAS,iBAIfC,IAAS,YAAkB,SAAUC,GACnC,IAAMC,EAAU,WAAID,EAAME,cAAc,QAAxB,OAAsC,EAEtD,MAAO,CADG,6BAAyBD,EAAzB,MACIF,IAAUI,eAG1BJ,IAAUK,iBAAiB,QA+DZC,MA7Df,SAAmBC,GACjB,IAAMC,EAAWC,cAyCjB,EAAsBC,mBAAS,MAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAEA,OACE,cAAC,mBAAD,CACEC,UAAWC,IAAOC,OAClBC,uBAAwB,CACtBC,KAAK,EACLC,YAAY,EACZjC,KAAM,CAAEkC,QAAS,GAAIC,OAAQ,EAAGtB,OAAQ,OAAQuB,MAAM,IAExDC,SAjBgB,SAACC,GACnB,IACMC,EADUD,EAAUE,aACDC,kBAAkB,GACrCC,EAActC,IAAQuC,IAAIC,UC3Eb,k8UD4EnBL,EAASM,qBAAqBH,IAc5BI,qBAAsBC,EACtBC,kBAhDoB,SAACV,GACvB,IAAMjE,EAAO0C,IAAUkC,gBAAgBX,GACjCY,EAAY9C,IAAQuC,IAAIQ,eAAeb,GACvCc,EAAUhD,IAAQuC,IAAIU,UAAUH,GAoBtCI,QAAQC,IAAI,QAASlF,EAAM,YAAa+E,GACxC7B,EAAS3B,EAAQvB,KAyBfmF,WAAY9B,EACZ+B,YAAa9B,K,gBE7FJ,MAA0B,mCC6G1B+B,MA7FR,WACL,IAAMnC,EAAWC,cACXnD,EAAOsF,YAAY5D,GACnBtB,EAAWkF,YAAY1D,GACvB3B,EAAYqF,YAAYzD,GACxBxB,EAASiF,YAAYxD,GAErByD,EAAM,SAACC,GACX,IAAMC,EAAMC,OAAOF,EAAItF,GAAKwF,OAAOF,EAAIrF,GAEnCoF,EACF,qBAAehC,UAAWC,IAAOmC,WAAjC,SACE,qBAAKpC,UAAWC,IAAOmC,cADfF,GAkBZ,OAdIpF,EAAOG,MAAK,SAACC,GAAD,OAAOC,IAAEC,QAAQF,EAAG+E,MAClCD,EACE,qBAAehC,UAAWC,IAAOb,MAAjC,SACE,qBAAKY,UAAWC,IAAOmC,cADfF,GAIH/E,IAAEC,QAAQ6E,EAAKpF,KACxBmF,EACE,qBAAehC,UAAWC,IAAOmC,WAAjC,SACE,qBAAKC,IAAKC,EAAQtC,UAAWC,IAAOmC,WAAYG,IAAI,YAD5CL,IAMPF,GA0BHQ,EAvBa,WAKjB,IAJA,IAAI7F,EAAI,EACJC,EAAI,EACJwB,EAAO,GAEJxB,EAAIF,EAAUE,GAAG,CACtBD,EAAI,EAEJ,IADA,IAAI8F,EAAM,GACH9F,EAAID,EAAUC,GACnB8F,EAAIC,KAAKV,EAAI,CAAErF,EAAGA,EAAGC,EAAGA,KACxBD,GAAK,EAEPyB,EAAKsE,KACH,qBAAuB1C,UAAWC,IAAOwC,IAAzC,SACGA,GADOrE,EAAKmC,SAIjB3D,GAAK,EAGP,OAAOwB,EAGKuE,GAEd,OACE,gCACE,qBAAK3C,UAAWC,IAAOwC,IAAvB,SACE,0CAAahG,OAEd+F,EACD,qBAAKxC,UAAWC,IAAOwC,IAAvB,SACE,iDACgB/F,EAAUC,EAD1B,OACiCD,EAAUE,OAG7C,qBAAKoD,UAAWC,IAAOwC,IAAvB,SACE,gDACe5F,EAASF,EADxB,OAC+BE,EAASD,OAG1C,qBAAKoD,UAAWC,IAAOwC,IAAvB,SACE,wBAAQzC,UAAWC,IAAO2C,OAAQC,QAAS,kBAAMlD,EAASlC,MAA1D,uBAIF,sBAAKuC,UAAWC,IAAOwC,IAAvB,UACE,wBAAQzC,UAAWC,IAAO2C,OAAQC,QAAS,kBAAMlD,EAAShC,MAA1D,uBAGA,wBAAQqC,UAAWC,IAAO2C,OAAQC,QAAS,kBAAMlD,EAASjC,MAA1D,uBAGA,wBAAQsC,UAAWC,IAAO2C,OAAQC,QAAS,kBAAMlD,EAAS/B,MAA1D,+BCnFOkF,MAdf,WACE,OACE,sBAAK9C,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,+CAEF,sBAAKA,UAAU,OAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,WCTK+C,EAAQC,YAAe,CAClCC,QAAS,CACP7E,KAAM8E,KCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.4931b779.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Workspace_App__uXB-Z\",\"App-logo\":\"Workspace_App-logo__22kf3\",\"App-logo-float\":\"Workspace_App-logo-float__UJDNX\",\"App-header\":\"Workspace_App-header__uIfyT\",\"App-link\":\"Workspace_App-link__8GT2e\",\"column\":\"Workspace_column__1K0X8\",\"row\":\"Workspace_row__2rklF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Grid_row__1eOrX\",\"value\":\"Grid_value__2sUNc\",\"button\":\"Grid_button__203FH\",\"textbox\":\"Grid_textbox__22XFB\",\"asyncButton\":\"Grid_asyncButton__3Kn6w Grid_button__203FH\",\"workerUnit\":\"Grid_workerUnit__3PrRN\",\"block\":\"Grid_block__32oiW\"};","import { createSlice } from \"@reduxjs/toolkit\";\nimport _ from \"lodash\";\n\nconst initialState = {\n  code: \"\",\n  grid_size: { x: 5, y: 4 },\n  position: { x: 0, y: 0 },\n  blocks: [\n    { x: 2, y: 2 },\n    { x: 3, y: 2 },\n  ],\n};\n\nfunction sanityCheck(state) {\n  if (state.position.y < 0) {\n    state.position.y = state.grid_size.y - 1;\n  }\n  if (state.position.y >= state.grid_size.y) {\n    state.position.y = 0;\n  }\n  if (state.position.x < 0) {\n    state.position.x = state.grid_size.x - 1;\n  }\n  if (state.position.x >= state.grid_size.x) {\n    state.position.x = 0;\n  }\n  if (state.blocks.some((e) => _.isEqual(e, state.position))) {\n    state.position = initialState.position;\n  }\n}\n\nexport const gridSlice = createSlice({\n  name: \"grid\",\n  initialState,\n  reducers: {\n    moveUp: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.position.y -= 1;\n      sanityCheck(state);\n    },\n    moveDown: (state) => {\n      state.position.y += 1;\n      sanityCheck(state);\n    },\n    moveLeft: (state) => {\n      state.position.x -= 1;\n      sanityCheck(state);\n    },\n    moveRight: (state) => {\n      state.position.x += 1;\n      sanityCheck(state);\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    move: (state, action) => {\n      state.position = action;\n      sanityCheck(state);\n    },\n    changeSize: (state, action) => {\n      state.grid_size = action;\n      sanityCheck(state);\n    },\n    setCode: (state, action) => {\n      state.code = action.payload;\n    },\n  },\n});\n\nexport const {\n  moveUp,\n  moveDown,\n  moveLeft,\n  moveRight,\n  move,\n  changeSize,\n  setCode,\n} = gridSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// // code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount: number): AppThunk => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a position from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.grid.position)`\nexport const selectCode = (state) => state.grid.code;\nexport const selectPosition = (state) => state.grid.position;\nexport const selectGridSize = (state) => state.grid.grid_size;\nexport const selectBlocks = (state) => state.grid.blocks;\n\nexport default gridSlice.reducer;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Blockly from \"blockly\";\nimport BlocklyJS from \"blockly/javascript\";\nimport styles from \"./Workspace.module.css\";\nimport custom_toolbox from \"./custom_toolbox.json\";\nimport default_workspace from \"./default_workspace\";\n// import { acorn, JSInterpreter } from \"./acorn_interpreter\";\nimport { setCode } from \"../grid/gridSlice\";\nimport { BlocklyWorkspace } from \"react-blockly\";\n\n// global.acorn = acorn;\n\nBlockly.Blocks[\"hello_world\"] = {\n  init: function () {\n    this.jsonInit({\n      message0: \"Hello %1\",\n      args0: [\n        {\n          type: \"field_input\",\n          name: \"NAME\",\n        },\n      ],\n      output: \"String\",\n      colour: 160,\n      tooltip: \"Says Hello\",\n    });\n  },\n};\nBlocklyJS[\"hello_world\"] = function (block) {\n  const message = `'${block.getFieldValue(\"NAME\")}'` || \"''\";\n  const code = `console.log('Hello ${message}')`;\n  return [code, BlocklyJS.ORDER_MEMBER];\n};\n\nBlocklyJS.addReservedWords(\"code\");\n\nfunction Workspace(props) {\n  const dispatch = useDispatch();\n\n  // BlocklyJS.STATEMENT_PREFIX = \"highlightBlock(%1);\\n\";\n  // BlocklyJS.addReservedWords(\"highlightBlock\");\n\n  const workspaceChange = (workspace) => {\n    const code = BlocklyJS.workspaceToCode(workspace);\n    const xmlParsed = Blockly.Xml.workspaceToDom(workspace);\n    const xmlText = Blockly.Xml.domToText(xmlParsed);\n    // var initFunc = function (interpreter, globalObject) {\n    //   var wrapper = function (text) {\n    //     console.log(text);\n    //   };\n    //   interpreter.setProperty(\n    //     globalObject,\n    //     \"alert\",\n    //     interpreter.createNativeFunction(wrapper)\n    //   );\n    //   var wrapper2 = function (id) {\n    //     return workspace.highlightBlock(id);\n    //   };\n    //   interpreter.setProperty(\n    //     globalObject,\n    //     \"highlightBlock\",\n    //     interpreter.createNativeFunction(wrapper2)\n    //   );\n    // };\n    // const myInterpreter = new JSInterpreter(code);\n    console.log(\"code:\", code, \"workspace\", xmlText);\n    dispatch(setCode(code));\n    // myInterpreter.run();\n    // console.log(\"Interpreter Run\", myInterpreter.value);\n  };\n\n  const useDefaults = (workspace) => {\n    const toolbox = workspace.getToolbox();\n    const category = toolbox.getToolboxItems()[1];\n    const dom_default = Blockly.Xml.textToDom(default_workspace);\n    category.updateFlyoutContents(dom_default);\n  };\n\n  const [xml, setXml] = useState(null);\n\n  return (\n    <BlocklyWorkspace\n      className={styles.column} // you can use whatever classes are appropriate for your app's CSS\n      workspaceConfiguration={{\n        css: true,\n        scrollbars: false,\n        grid: { spacing: 20, length: 3, colour: \"#ccc\", snap: true },\n      }}\n      onInject={useDefaults}\n      toolboxConfiguration={custom_toolbox} // this must be a JSON toolbox definition\n      onWorkspaceChange={workspaceChange}\n      initialXml={xml}\n      onXmlChange={setXml}\n    />\n  );\n}\n\nexport default Workspace;\n","const default_workspace = `<xml>\n  <category name=\"Logic\" colour=\"#5b80a5\">\n    <block type=\"controls_if\"></block>\n    <block type=\"logic_compare\">\n      <field name=\"OP\">EQ</field>\n    </block>\n    <block type=\"logic_operation\">\n      <field name=\"OP\">AND</field>\n    </block>\n    <block type=\"logic_negate\"></block>\n    <block type=\"logic_boolean\">\n      <field name=\"BOOL\">TRUE</field>\n    </block>\n    <block type=\"logic_null\"></block>\n    <block type=\"logic_ternary\"></block>\n  </category>\n  <category name=\"Loops\" colour=\"#5ba55b\">\n    <block type=\"controls_repeat_ext\">\n      <value name=\"TIMES\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">10</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"controls_whileUntil\">\n      <field name=\"MODE\">WHILE</field>\n    </block>\n    <block type=\"controls_for\">\n      <field name=\"VAR\" id=\"o*|CQ[]!OQ+C7X$IAp5Y\">i</field>\n      <value name=\"FROM\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">1</field>\n        </shadow>\n      </value>\n      <value name=\"TO\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">10</field>\n        </shadow>\n      </value>\n      <value name=\"BY\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">1</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"controls_forEach\">\n      <field name=\"VAR\" id=\")h8}D_!Ln59}i-8v.X24\">j</field>\n    </block>\n    <block type=\"controls_flow_statements\">\n      <field name=\"FLOW\">BREAK</field>\n    </block>\n  </category>\n  <category name=\"Math\" colour=\"#5b67a5\">\n    <block type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </block>\n    <block type=\"math_arithmetic\">\n      <field name=\"OP\">ADD</field>\n      <value name=\"A\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">1</field>\n        </shadow>\n      </value>\n      <value name=\"B\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">1</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"math_single\">\n      <field name=\"OP\">ROOT</field>\n      <value name=\"NUM\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">9</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"math_trig\">\n      <field name=\"OP\">SIN</field>\n      <value name=\"NUM\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">45</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"math_constant\">\n      <field name=\"CONSTANT\">PI</field>\n    </block>\n    <block type=\"math_number_property\">\n      <mutation divisor_input=\"false\"></mutation>\n      <field name=\"PROPERTY\">EVEN</field>\n      <value name=\"NUMBER_TO_CHECK\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">0</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"math_round\">\n      <field name=\"OP\">ROUND</field>\n      <value name=\"NUM\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">3.1</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"math_on_list\">\n      <mutation op=\"SUM\"></mutation>\n      <field name=\"OP\">SUM</field>\n    </block>\n    <block type=\"math_modulo\">\n      <value name=\"DIVIDEND\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">64</field>\n        </shadow>\n      </value>\n      <value name=\"DIVISOR\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">10</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"math_constrain\">\n      <value name=\"VALUE\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">50</field>\n        </shadow>\n      </value>\n      <value name=\"LOW\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">1</field>\n        </shadow>\n      </value>\n      <value name=\"HIGH\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">100</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"math_random_int\">\n      <value name=\"FROM\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">1</field>\n        </shadow>\n      </value>\n      <value name=\"TO\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">100</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"math_random_float\"></block>\n  </category>\n  <category name=\"Text\" colour=\"#5ba58c\">\n    <block type=\"text\">\n      <field name=\"TEXT\"></field>\n    </block>\n    <block type=\"text_join\">\n      <mutation items=\"2\"></mutation>\n    </block>\n    <block type=\"text_append\">\n      <field name=\"VAR\" id=\"7rq*JSR*UH_ZM;}kn{rP\">item</field>\n      <value name=\"TEXT\">\n        <shadow type=\"text\">\n          <field name=\"TEXT\"></field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"text_length\">\n      <value name=\"VALUE\">\n        <shadow type=\"text\">\n          <field name=\"TEXT\">abc</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"text_isEmpty\">\n      <value name=\"VALUE\">\n        <shadow type=\"text\">\n          <field name=\"TEXT\"></field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"text_indexOf\">\n      <field name=\"END\">FIRST</field>\n      <value name=\"VALUE\">\n        <block type=\"variables_get\">\n          <field name=\"VAR\" id=\"6m*G.5NBf:qMrDMA+H!_\">text</field>\n        </block>\n      </value>\n      <value name=\"FIND\">\n        <shadow type=\"text\">\n          <field name=\"TEXT\">abc</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"text_charAt\">\n      <mutation at=\"true\"></mutation>\n      <field name=\"WHERE\">FROM_START</field>\n      <value name=\"VALUE\">\n        <block type=\"variables_get\">\n          <field name=\"VAR\" id=\"6m*G.5NBf:qMrDMA+H!_\">text</field>\n        </block>\n      </value>\n    </block>\n    <block type=\"text_getSubstring\">\n      <mutation at1=\"true\" at2=\"true\"></mutation>\n      <field name=\"WHERE1\">FROM_START</field>\n      <field name=\"WHERE2\">FROM_START</field>\n      <value name=\"STRING\">\n        <block type=\"variables_get\">\n          <field name=\"VAR\" id=\"6m*G.5NBf:qMrDMA+H!_\">text</field>\n        </block>\n      </value>\n    </block>\n    <block type=\"text_changeCase\">\n      <field name=\"CASE\">UPPERCASE</field>\n      <value name=\"TEXT\">\n        <shadow type=\"text\">\n          <field name=\"TEXT\">abc</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"text_trim\">\n      <field name=\"MODE\">BOTH</field>\n      <value name=\"TEXT\">\n        <shadow type=\"text\">\n          <field name=\"TEXT\">abc</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"text_print\">\n      <value name=\"TEXT\">\n        <shadow type=\"text\">\n          <field name=\"TEXT\">abc</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"text_prompt_ext\">\n      <mutation type=\"TEXT\"></mutation>\n      <field name=\"TYPE\">TEXT</field>\n      <value name=\"TEXT\">\n        <shadow type=\"text\">\n          <field name=\"TEXT\">abc</field>\n        </shadow>\n      </value>\n    </block>\n  </category>\n  <category name=\"Lists\" colour=\"#745ba5\">\n    <block type=\"lists_create_with\">\n      <mutation items=\"0\"></mutation>\n    </block>\n    <block type=\"lists_create_with\">\n      <mutation items=\"3\"></mutation>\n    </block>\n    <block type=\"lists_repeat\">\n      <value name=\"NUM\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">5</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"lists_length\"></block>\n    <block type=\"lists_isEmpty\"></block>\n    <block type=\"lists_indexOf\">\n      <field name=\"END\">FIRST</field>\n      <value name=\"VALUE\">\n        <block type=\"variables_get\">\n          <field name=\"VAR\" id=\"?8?7A|ie|cS4v/ClUyWZ\">list</field>\n        </block>\n      </value>\n    </block>\n    <block type=\"lists_getIndex\">\n      <mutation statement=\"false\" at=\"true\"></mutation>\n      <field name=\"MODE\">GET</field>\n      <field name=\"WHERE\">FROM_START</field>\n      <value name=\"VALUE\">\n        <block type=\"variables_get\">\n          <field name=\"VAR\" id=\"?8?7A|ie|cS4v/ClUyWZ\">list</field>\n        </block>\n      </value>\n    </block>\n    <block type=\"lists_setIndex\">\n      <mutation at=\"true\"></mutation>\n      <field name=\"MODE\">SET</field>\n      <field name=\"WHERE\">FROM_START</field>\n      <value name=\"LIST\">\n        <block type=\"variables_get\">\n          <field name=\"VAR\" id=\"?8?7A|ie|cS4v/ClUyWZ\">list</field>\n        </block>\n      </value>\n    </block>\n    <block type=\"lists_getSublist\">\n      <mutation at1=\"true\" at2=\"true\"></mutation>\n      <field name=\"WHERE1\">FROM_START</field>\n      <field name=\"WHERE2\">FROM_START</field>\n      <value name=\"LIST\">\n        <block type=\"variables_get\">\n          <field name=\"VAR\" id=\"?8?7A|ie|cS4v/ClUyWZ\">list</field>\n        </block>\n      </value>\n    </block>\n    <block type=\"lists_split\">\n      <mutation mode=\"SPLIT\"></mutation>\n      <field name=\"MODE\">SPLIT</field>\n      <value name=\"DELIM\">\n        <shadow type=\"text\">\n          <field name=\"TEXT\">,</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"lists_sort\">\n      <field name=\"TYPE\">NUMERIC</field>\n      <field name=\"DIRECTION\">1</field>\n    </block>\n  </category>\n  <category name=\"Colour\" colour=\"#a5745b\">\n    <block type=\"colour_picker\">\n      <field name=\"COLOUR\">#ff0000</field>\n    </block>\n    <block type=\"colour_random\"></block>\n    <block type=\"colour_rgb\">\n      <value name=\"RED\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">100</field>\n        </shadow>\n      </value>\n      <value name=\"GREEN\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">50</field>\n        </shadow>\n      </value>\n      <value name=\"BLUE\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">0</field>\n        </shadow>\n      </value>\n    </block>\n    <block type=\"colour_blend\">\n      <value name=\"COLOUR1\">\n        <shadow type=\"colour_picker\">\n          <field name=\"COLOUR\">#ff0000</field>\n        </shadow>\n      </value>\n      <value name=\"COLOUR2\">\n        <shadow type=\"colour_picker\">\n          <field name=\"COLOUR\">#3333ff</field>\n        </shadow>\n      </value>\n      <value name=\"RATIO\">\n        <shadow type=\"math_number\">\n          <field name=\"NUM\">0.5</field>\n        </shadow>\n      </value>\n    </block>\n  </category>\n  <sep></sep>\n  <category name=\"Variables\" colour=\"#a55b80\" custom=\"VARIABLE\"></category>\n  <category name=\"Functions\" colour=\"#995ba5\" custom=\"PROCEDURE\"></category>\n</xml>`;\n\nexport default default_workspace;\n","export default __webpack_public_path__ + \"static/media/worker.e18205b6.png\";","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  moveUp,\n  moveDown,\n  moveLeft,\n  moveRight,\n  selectPosition,\n  selectGridSize,\n  selectBlocks,\n  selectCode,\n} from \"./gridSlice\";\nimport styles from \"./Grid.module.css\";\nimport worker from \"../../assets/units/worker.png\";\nimport _ from \"lodash\";\n\nexport function Grid() {\n  const dispatch = useDispatch();\n  const code = useSelector(selectCode);\n  const position = useSelector(selectPosition);\n  const grid_size = useSelector(selectGridSize);\n  const blocks = useSelector(selectBlocks);\n\n  const dot = (obj) => {\n    const key = String(obj.x) + String(obj.y);\n\n    let dot = (\n      <div key={key} className={styles.workerUnit}>\n        <div className={styles.workerUnit}></div>\n      </div>\n    );\n    if (blocks.some((e) => _.isEqual(e, obj))) {\n      dot = (\n        <div key={key} className={styles.block}>\n          <div className={styles.workerUnit}></div>\n        </div>\n      );\n    } else if (_.isEqual(obj, position)) {\n      dot = (\n        <div key={key} className={styles.workerUnit}>\n          <img src={worker} className={styles.workerUnit} alt=\"worker\"></img>\n        </div>\n      );\n    }\n\n    return dot;\n  };\n\n  const renderRows = () => {\n    let x = 0;\n    let y = 0;\n    let grid = [];\n\n    while (y < grid_size.y) {\n      x = 0;\n      let row = [];\n      while (x < grid_size.x) {\n        row.push(dot({ x: x, y: y }));\n        x += 1;\n      }\n      grid.push(\n        <div key={grid.length} className={styles.row}>\n          {row}\n        </div>\n      );\n      y += 1;\n    }\n\n    return grid;\n  };\n\n  const space = renderRows();\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <span>Code: {code}</span>\n      </div>\n      {space}\n      <div className={styles.row}>\n        <span>\n          Grid Size: x:{grid_size.x}, y:{grid_size.y}\n        </span>\n      </div>\n      <div className={styles.row}>\n        <span>\n          Position: x:{position.x}, y:{position.y}\n        </span>\n      </div>\n      <div className={styles.row}>\n        <button className={styles.button} onClick={() => dispatch(moveUp())}>\n          Move Up\n        </button>\n      </div>\n      <div className={styles.row}>\n        <button className={styles.button} onClick={() => dispatch(moveLeft())}>\n          Move Left\n        </button>\n        <button className={styles.button} onClick={() => dispatch(moveDown())}>\n          Move Down\n        </button>\n        <button className={styles.button} onClick={() => dispatch(moveRight())}>\n          Move Right\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Grid;\n","import React from \"react\";\nimport \"./App.css\";\nimport Workspace from \"./features/workspace/Workspace\";\nimport Grid from \"./features/grid/Grid\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <span>Blocktown</span>\n      </header>\n      <div className=\"Main\">\n        <Workspace />\n        <Grid />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport gridReducer from \"../features/grid/gridSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    grid: gridReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}